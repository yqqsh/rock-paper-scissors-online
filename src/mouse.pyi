from typing import Optional, Tuple, List

import src.config as cfg

import pygame

__instance: Optional["Mouse"] = None


class Mouse:
    __x: int
    __y: int
    __prev_x: int
    __prev_y: int
    __pressed: Tuple[bool, bool, bool]
    __just_pressed: Tuple[bool, bool, bool]
    __just_released: Tuple[bool, bool, bool]

    def __init__(self) -> None: ...
    def update(self, events: List[pygame.event.Event]) -> None: ...
    @property
    def x(self) -> int: ...
    @property
    def y(self) -> int: ...
    @property
    def x_diff(self) -> int: ...
    @property
    def y_diff(self) -> int: ...
    @property
    def prev_x(self) -> int: ...
    @property
    def prev_y(self) -> int: ...
    @property
    def pos(self) -> Tuple[int, int]: ...
    @property
    def prev_pos(self) -> Tuple[int, int]: ...
    @property
    def is_pressed(self) -> Tuple[bool, bool, bool]: ...
    @property
    def is_left_pressed(self) -> bool: ...
    @property
    def is_middle_pressed(self) -> bool: ...
    @property
    def is_right_pressed(self) -> bool: ...
    @property
    def just_pressed(self) -> Tuple[bool, bool, bool]: ...
    @property
    def just_pressed_left(self) -> bool: ...
    @property
    def just_pressed_middle(self) -> bool: ...
    @property
    def just_pressed_right(self) -> bool: ...
    @property
    def just_released(self) -> Tuple[bool, bool, bool]: ...
    @property
    def just_released_left(self) -> bool: ...
    @property
    def just_released_middle(self) -> bool: ...
    @property
    def just_released_right(self) -> bool: ...
    @staticmethod
    def create() -> "Mouse": ...
